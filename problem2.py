"""
Solution to the following problem:

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
https://projecteuler.net/problem=2

"""

import datetime

def fib(n, fibstore = [1,1], debug = True):
	# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89...
	# This function updates computed Fibonacci number to the list "fibstore" that can be traced in later iterations within this call of the function or in future call to this function. The design dramatically improves the run-time performance of this function in repetitive calls or a single call of large "n".

	if debug:
		print "index evluated in current iteration is %s" % n
	if n == 1:
		return 1
	elif n == 2:
		return 1
	assert n > 0 and type(n) is int, "invalid input, the input has to be a positive integer."

	pre_length = len(fibstore)
	tmp = fibstore
	if pre_length >= (n-1):
		term = fibstore[n-2] + fibstore[n-3]
	elif pre_length >= (n-2):
		term = fib(n-1, tmp) + fibstore[n-3]
	else:
		term1 = fib(n-2, tmp)
		term2 = fib(n-1, tmp)
		term = term1 + term2
	tmp.append(term)
	return term

def test():
	fibstore = [1,1]
	starttime = datetime.datetime.now()
	fib(1000,fibstore)
	endtime = datetime.datetime.now()
	interval1 = (endtime - starttime).microseconds
	starttime = datetime.datetime.now()
	fib(1000,fibstore)
	endtime = datetime.datetime.now()
	interval2 = (endtime - starttime).microseconds
	print "first-time running time is %20.15f" % interval1
	print "second-time running time is %20.15f" % interval2

def solution():
	CRITERIA = 4e+6
	fibstore = [1,1]
	k = 2
	s = 0
	current = fib(k, fibstore)
	while current<CRITERIA:
		if current % 2 == 0:
			s = s + current
		k = k+1
		current = fib(k, fibstore)
	print "the sum of even-valued terms in Fibonacci sequence withvalues not exceeding %s is %s" % (CRITERIA, s)

solution()